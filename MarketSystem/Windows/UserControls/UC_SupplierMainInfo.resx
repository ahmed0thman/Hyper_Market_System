<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnClearControls.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>